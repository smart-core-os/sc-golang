// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.29.1
// source: pkg/trait/electricpb/memory_settings.proto

package electricpb

import (
	traits "github.com/smart-core-os/sc-api/go/traits"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type UpdateDemandRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the device.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Updated properties of the device.
	Demand *traits.ElectricDemand `protobuf:"bytes,2,opt,name=demand,proto3" json:"demand,omitempty"`
	// Fields that should be updated.
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,3,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
}

func (x *UpdateDemandRequest) Reset() {
	*x = UpdateDemandRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_trait_electricpb_memory_settings_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDemandRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDemandRequest) ProtoMessage() {}

func (x *UpdateDemandRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_trait_electricpb_memory_settings_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDemandRequest.ProtoReflect.Descriptor instead.
func (*UpdateDemandRequest) Descriptor() ([]byte, []int) {
	return file_pkg_trait_electricpb_memory_settings_proto_rawDescGZIP(), []int{0}
}

func (x *UpdateDemandRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateDemandRequest) GetDemand() *traits.ElectricDemand {
	if x != nil {
		return x.Demand
	}
	return nil
}

func (x *UpdateDemandRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

type CreateModeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the device.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The mode to create. ID will be created on the server.
	Mode *traits.ElectricMode `protobuf:"bytes,2,opt,name=mode,proto3" json:"mode,omitempty"`
}

func (x *CreateModeRequest) Reset() {
	*x = CreateModeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_trait_electricpb_memory_settings_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateModeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateModeRequest) ProtoMessage() {}

func (x *CreateModeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_trait_electricpb_memory_settings_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateModeRequest.ProtoReflect.Descriptor instead.
func (*CreateModeRequest) Descriptor() ([]byte, []int) {
	return file_pkg_trait_electricpb_memory_settings_proto_rawDescGZIP(), []int{1}
}

func (x *CreateModeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateModeRequest) GetMode() *traits.ElectricMode {
	if x != nil {
		return x.Mode
	}
	return nil
}

type UpdateModeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the device.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The mode to create.
	// The ID should match an existing mode or NOT_FOUND will be returned.
	Mode *traits.ElectricMode `protobuf:"bytes,2,opt,name=mode,proto3" json:"mode,omitempty"`
	// The fields to update.
	// If absent all fields will be updated.
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,3,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
}

func (x *UpdateModeRequest) Reset() {
	*x = UpdateModeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_trait_electricpb_memory_settings_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateModeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateModeRequest) ProtoMessage() {}

func (x *UpdateModeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_trait_electricpb_memory_settings_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateModeRequest.ProtoReflect.Descriptor instead.
func (*UpdateModeRequest) Descriptor() ([]byte, []int) {
	return file_pkg_trait_electricpb_memory_settings_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateModeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateModeRequest) GetMode() *traits.ElectricMode {
	if x != nil {
		return x.Mode
	}
	return nil
}

func (x *UpdateModeRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

type DeleteModeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the device.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The ID of the mode to delete.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// If set to true and the mode is not found the request will succeed but no action will be taken on the server.
	AllowMissing bool `protobuf:"varint,3,opt,name=allow_missing,json=allowMissing,proto3" json:"allow_missing,omitempty"`
}

func (x *DeleteModeRequest) Reset() {
	*x = DeleteModeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_trait_electricpb_memory_settings_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteModeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteModeRequest) ProtoMessage() {}

func (x *DeleteModeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_trait_electricpb_memory_settings_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteModeRequest.ProtoReflect.Descriptor instead.
func (*DeleteModeRequest) Descriptor() ([]byte, []int) {
	return file_pkg_trait_electricpb_memory_settings_proto_rawDescGZIP(), []int{3}
}

func (x *DeleteModeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeleteModeRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeleteModeRequest) GetAllowMissing() bool {
	if x != nil {
		return x.AllowMissing
	}
	return false
}

var File_pkg_trait_electricpb_memory_settings_proto protoreflect.FileDescriptor

var file_pkg_trait_electricpb_memory_settings_proto_rawDesc = []byte{
	0x0a, 0x2a, 0x70, 0x6b, 0x67, 0x2f, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2f, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x72, 0x69, 0x63, 0x70, 0x62, 0x2f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1b, 0x73, 0x6d,
	0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x67, 0x6f, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74,
	0x2e, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x1a, 0x15, 0x74, 0x72, 0x61, 0x69, 0x74,
	0x73, 0x2f, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xa0, 0x01, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x06, 0x64,
	0x65, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x6d,
	0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x45,
	0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x06, 0x64,
	0x65, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x6d, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61,
	0x73, 0x6b, 0x22, 0x5b, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x6d,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x6d, 0x61, 0x72,
	0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x45, 0x6c, 0x65,
	0x63, 0x74, 0x72, 0x69, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x22,
	0x98, 0x01, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x6d, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x45, 0x6c, 0x65, 0x63, 0x74,
	0x72, 0x69, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x3b, 0x0a,
	0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0x5c, 0x0a, 0x11, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x32, 0x89, 0x03, 0x0a, 0x11, 0x4d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x41, 0x70, 0x69, 0x12, 0x62,
	0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x30,
	0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x67, 0x6f, 0x2e, 0x74, 0x72,
	0x61, 0x69, 0x74, 0x2e, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x20, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61,
	0x69, 0x74, 0x73, 0x2e, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x44, 0x65, 0x6d, 0x61,
	0x6e, 0x64, 0x12, 0x5c, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x2e, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x67, 0x6f, 0x2e,
	0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1e, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61,
	0x69, 0x74, 0x73, 0x2e, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x5c, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x2e,
	0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x67, 0x6f, 0x2e, 0x74, 0x72,
	0x61, 0x69, 0x74, 0x2e, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e,
	0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74,
	0x73, 0x2e, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x54,
	0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x2e, 0x2e, 0x73,
	0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x67, 0x6f, 0x2e, 0x74, 0x72, 0x61, 0x69,
	0x74, 0x2e, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x42, 0x39, 0x5a, 0x37, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x2d, 0x63, 0x6f, 0x72, 0x65, 0x2d, 0x6f, 0x73,
	0x2f, 0x73, 0x63, 0x2d, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x74,
	0x72, 0x61, 0x69, 0x74, 0x2f, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x70, 0x62, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pkg_trait_electricpb_memory_settings_proto_rawDescOnce sync.Once
	file_pkg_trait_electricpb_memory_settings_proto_rawDescData = file_pkg_trait_electricpb_memory_settings_proto_rawDesc
)

func file_pkg_trait_electricpb_memory_settings_proto_rawDescGZIP() []byte {
	file_pkg_trait_electricpb_memory_settings_proto_rawDescOnce.Do(func() {
		file_pkg_trait_electricpb_memory_settings_proto_rawDescData = protoimpl.X.CompressGZIP(file_pkg_trait_electricpb_memory_settings_proto_rawDescData)
	})
	return file_pkg_trait_electricpb_memory_settings_proto_rawDescData
}

var file_pkg_trait_electricpb_memory_settings_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_pkg_trait_electricpb_memory_settings_proto_goTypes = []any{
	(*UpdateDemandRequest)(nil),   // 0: smartcore.go.trait.electric.UpdateDemandRequest
	(*CreateModeRequest)(nil),     // 1: smartcore.go.trait.electric.CreateModeRequest
	(*UpdateModeRequest)(nil),     // 2: smartcore.go.trait.electric.UpdateModeRequest
	(*DeleteModeRequest)(nil),     // 3: smartcore.go.trait.electric.DeleteModeRequest
	(*traits.ElectricDemand)(nil), // 4: smartcore.traits.ElectricDemand
	(*fieldmaskpb.FieldMask)(nil), // 5: google.protobuf.FieldMask
	(*traits.ElectricMode)(nil),   // 6: smartcore.traits.ElectricMode
	(*emptypb.Empty)(nil),         // 7: google.protobuf.Empty
}
var file_pkg_trait_electricpb_memory_settings_proto_depIdxs = []int32{
	4, // 0: smartcore.go.trait.electric.UpdateDemandRequest.demand:type_name -> smartcore.traits.ElectricDemand
	5, // 1: smartcore.go.trait.electric.UpdateDemandRequest.update_mask:type_name -> google.protobuf.FieldMask
	6, // 2: smartcore.go.trait.electric.CreateModeRequest.mode:type_name -> smartcore.traits.ElectricMode
	6, // 3: smartcore.go.trait.electric.UpdateModeRequest.mode:type_name -> smartcore.traits.ElectricMode
	5, // 4: smartcore.go.trait.electric.UpdateModeRequest.update_mask:type_name -> google.protobuf.FieldMask
	0, // 5: smartcore.go.trait.electric.MemorySettingsApi.UpdateDemand:input_type -> smartcore.go.trait.electric.UpdateDemandRequest
	1, // 6: smartcore.go.trait.electric.MemorySettingsApi.CreateMode:input_type -> smartcore.go.trait.electric.CreateModeRequest
	2, // 7: smartcore.go.trait.electric.MemorySettingsApi.UpdateMode:input_type -> smartcore.go.trait.electric.UpdateModeRequest
	3, // 8: smartcore.go.trait.electric.MemorySettingsApi.DeleteMode:input_type -> smartcore.go.trait.electric.DeleteModeRequest
	4, // 9: smartcore.go.trait.electric.MemorySettingsApi.UpdateDemand:output_type -> smartcore.traits.ElectricDemand
	6, // 10: smartcore.go.trait.electric.MemorySettingsApi.CreateMode:output_type -> smartcore.traits.ElectricMode
	6, // 11: smartcore.go.trait.electric.MemorySettingsApi.UpdateMode:output_type -> smartcore.traits.ElectricMode
	7, // 12: smartcore.go.trait.electric.MemorySettingsApi.DeleteMode:output_type -> google.protobuf.Empty
	9, // [9:13] is the sub-list for method output_type
	5, // [5:9] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_pkg_trait_electricpb_memory_settings_proto_init() }
func file_pkg_trait_electricpb_memory_settings_proto_init() {
	if File_pkg_trait_electricpb_memory_settings_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pkg_trait_electricpb_memory_settings_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateDemandRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_trait_electricpb_memory_settings_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*CreateModeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_trait_electricpb_memory_settings_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateModeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_trait_electricpb_memory_settings_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteModeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pkg_trait_electricpb_memory_settings_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pkg_trait_electricpb_memory_settings_proto_goTypes,
		DependencyIndexes: file_pkg_trait_electricpb_memory_settings_proto_depIdxs,
		MessageInfos:      file_pkg_trait_electricpb_memory_settings_proto_msgTypes,
	}.Build()
	File_pkg_trait_electricpb_memory_settings_proto = out.File
	file_pkg_trait_electricpb_memory_settings_proto_rawDesc = nil
	file_pkg_trait_electricpb_memory_settings_proto_goTypes = nil
	file_pkg_trait_electricpb_memory_settings_proto_depIdxs = nil
}
