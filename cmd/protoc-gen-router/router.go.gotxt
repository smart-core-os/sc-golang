{{- /*gotype: github.com/smart-core-os/sc-golang/cmd/protoc-gen-router.ServiceModel*/ -}}
// Code generated by protoc-gen-router. DO NOT EDIT.

package {{.PackageName}}

{{/*Imports handled by the invoker code*/}}

// {{.RouterName}} is a {{.ServerName.Qualified}} that allows routing named requests to specific {{.ClientName.Qualified}}
type {{.RouterName}} struct {
	{{.UnimplementedServerName.Qualified}}

  router.Router
}

// compile time check that we implement the interface we need
var _ {{.ServerName.Qualified}} = (*{{.RouterName}})(nil)

func New{{.RouterName}}(opts ...router.Option) *{{.RouterName}} {
	return &{{.RouterName}}{
    Router: router.NewRouter(opts...),
  }
}

// With{{.ClientName.Exported}}Factory instructs the router to create a new
// client the first time Get is called for that name.
func With{{.ClientName.Exported}}Factory(f func(name string) ({{.ClientName.Qualified}}, error)) router.Option {
  return router.WithFactory(func(name string) (any, error) {
    return f(name)
  })
}

func (r *{{.RouterName}}) Register(server grpc.ServiceRegistrar) {
	{{.RegisterService.Qualified}}(server, r)
}

// Add extends Router.Add to panic if client is not of type {{.ClientName.Qualified}}.
func (r *{{.RouterName}}) Add(name string, client any) any {
  if !r.HoldsType(client) {
    panic(fmt.Sprintf("not correct type: client of type %T is not a {{.ClientName.Qualified}}", client))
  }
  return r.Router.Add(name, client)
}

func (r *{{.RouterName}}) HoldsType(client any) bool {
  _, ok := client.({{.ClientName.Qualified}})
	return ok
}

func (r *{{.RouterName}}) Add{{.ClientName.Exported}}(name string, client {{.ClientName.Qualified}}) {{.ClientName.Qualified}} {
	res := r.Add(name, client)
	if res == nil {
		return nil
	}
	return res.({{.ClientName.Qualified}})
}

func (r *{{.RouterName}}) Remove{{.ClientName.Exported}}(name string) {{.ClientName.Qualified}} {
	res := r.Remove(name)
	if res == nil {
		return nil
	}
	return res.({{.ClientName.Qualified}})
}

func (r *{{.RouterName}}) Get{{.ClientName.Exported}}(name string) ({{.ClientName.Qualified}}, error) {
	res, err := r.Get(name)
	if err != nil {
		return nil, err
	}
	if res == nil {
		return nil, nil
	}
	return res.({{.ClientName.Qualified}}), nil
}

{{range .Methods}}
{{if .Desc.IsStreamingServer}}
func (r *{{$.RouterName}}) {{.GoName}}(request *{{.GoInput.Qualified}}, server {{.ServerStream.Qualified}}) error {
	child, err := r.Get{{$.ClientName.Exported}}(request.Name)
	if err != nil {
		return err
	}

	// so we can cancel our forwarding request if we can't send responses to our caller
	reqCtx, reqDone := context.WithCancel(server.Context())
	// issue the request
	stream, err := child.{{.GoName}}(reqCtx, request)
	if err != nil {
		return err
	}

	// send the stream header
	header, err := stream.Header()
	if err != nil {
		return err
	}
	if err = server.SendHeader(header); err != nil {
		return err
	}

	// send all the messages
	// false means the error is from the child, true means the error is from the caller
	var callerError bool
	for {
		// Impl note: we could improve throughput here by issuing the Recv and Send in different goroutines, but we're doing
		// it synchronously until we have a need to change the behaviour

		var msg *{{.GoOutput.Qualified}}
		msg, err = stream.Recv()
		if err != nil {
			break
		}

		err = server.Send(msg)
		if err != nil {
			callerError = true
			break
		}
	}

	// err is guaranteed to be non-nil as it's the only way to exit the loop
	if callerError {
		// cancel the request
		reqDone()
		return err
	} else {
		if trailer := stream.Trailer(); trailer != nil {
			server.SetTrailer(trailer)
		}
		if err == io.EOF {
			return nil
		}
		return err
	}
}
{{else}}
func (r *{{$.RouterName}}) {{.GoName}}(ctx context.Context, request *{{.GoInput.Qualified}}) (*{{.GoOutput.Qualified}}, error) {
	child, err := r.Get{{$.ClientName.Exported}}(request.Name)
	if err != nil {
		return nil, err
	}

	return child.{{.GoName}}(ctx, request)
}
{{end}}
{{end}}
