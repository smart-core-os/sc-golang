// Code generated by protoc-gen-router. DO NOT EDIT.

package wastepb

import (
	context "context"
	fmt "fmt"
	traits "github.com/smart-core-os/sc-api/go/traits"
	router "github.com/smart-core-os/sc-golang/pkg/router"
	grpc "google.golang.org/grpc"
)

// InfoRouter is a traits.WasteInfoServer that allows routing named requests to specific traits.WasteInfoClient
type InfoRouter struct {
	traits.UnimplementedWasteInfoServer

	router.Router
}

// compile time check that we implement the interface we need
var _ traits.WasteInfoServer = (*InfoRouter)(nil)

func NewInfoRouter(opts ...router.Option) *InfoRouter {
	return &InfoRouter{
		Router: router.NewRouter(opts...),
	}
}

// WithWasteInfoClientFactory instructs the router to create a new
// client the first time Get is called for that name.
func WithWasteInfoClientFactory(f func(name string) (traits.WasteInfoClient, error)) router.Option {
	return router.WithFactory(func(name string) (any, error) {
		return f(name)
	})
}

func (r *InfoRouter) Register(server grpc.ServiceRegistrar) {
	traits.RegisterWasteInfoServer(server, r)
}

// Add extends Router.Add to panic if client is not of type traits.WasteInfoClient.
func (r *InfoRouter) Add(name string, client any) any {
	if !r.HoldsType(client) {
		panic(fmt.Sprintf("not correct type: client of type %T is not a traits.WasteInfoClient", client))
	}
	return r.Router.Add(name, client)
}

func (r *InfoRouter) HoldsType(client any) bool {
	_, ok := client.(traits.WasteInfoClient)
	return ok
}

func (r *InfoRouter) AddWasteInfoClient(name string, client traits.WasteInfoClient) traits.WasteInfoClient {
	res := r.Add(name, client)
	if res == nil {
		return nil
	}
	return res.(traits.WasteInfoClient)
}

func (r *InfoRouter) RemoveWasteInfoClient(name string) traits.WasteInfoClient {
	res := r.Remove(name)
	if res == nil {
		return nil
	}
	return res.(traits.WasteInfoClient)
}

func (r *InfoRouter) GetWasteInfoClient(name string) (traits.WasteInfoClient, error) {
	res, err := r.Get(name)
	if err != nil {
		return nil, err
	}
	if res == nil {
		return nil, nil
	}
	return res.(traits.WasteInfoClient), nil
}

func (r *InfoRouter) DescribeWasteRecord(ctx context.Context, request *traits.DescribeWasteRecordRequest) (*traits.WasteRecordSupport, error) {
	child, err := r.GetWasteInfoClient(request.Name)
	if err != nil {
		return nil, err
	}

	return child.DescribeWasteRecord(ctx, request)
}
