// Code generated by protoc-gen-wrapper. DO NOT EDIT.

package emergency

import (
	traits "github.com/smart-core-os/sc-api/go/traits"
	wrap "github.com/smart-core-os/sc-golang/pkg/wrap"
)

// WrapInfo	adapts a traits.EmergencyInfoServer	and presents it as a traits.EmergencyInfoClient
func WrapInfo(server traits.EmergencyInfoServer) traits.EmergencyInfoClient {
	conn := wrap.ServerToClient(traits.EmergencyInfo_ServiceDesc, server)
	client := traits.NewEmergencyInfoClient(conn)
	return &infoWrapper{
		EmergencyInfoClient: client,
		server:              server,
	}
}

type infoWrapper struct {
	traits.EmergencyInfoClient

	server traits.EmergencyInfoServer
}

// compile time check that we implement the interface we need
var _ traits.EmergencyInfoClient = (*infoWrapper)(nil)

// UnwrapServer returns the underlying server instance.
func (w *infoWrapper) UnwrapServer() traits.EmergencyInfoServer {
	return w.server
}

// Unwrap implements wrap.Unwrapper and returns the underlying server instance as an unknown type.
func (w *infoWrapper) Unwrap() any {
	return w.UnwrapServer()
}
