// Code generated by protoc-gen-wrapper. DO NOT EDIT.

package parent

import (
	traits "github.com/smart-core-os/sc-api/go/traits"
	wrap "github.com/smart-core-os/sc-golang/pkg/wrap"
)

// WrapApi	adapts a traits.ParentApiServer	and presents it as a traits.ParentApiClient
func WrapApi(server traits.ParentApiServer) traits.ParentApiClient {
	conn := wrap.ServerToClient(traits.ParentApi_ServiceDesc, server)
	client := traits.NewParentApiClient(conn)
	return &apiWrapper{
		ParentApiClient: client,
		server:          server,
	}
}

type apiWrapper struct {
	traits.ParentApiClient

	server traits.ParentApiServer
}

// compile time check that we implement the interface we need
var _ traits.ParentApiClient = (*apiWrapper)(nil)

// UnwrapServer returns the underlying server instance.
func (w *apiWrapper) UnwrapServer() traits.ParentApiServer {
	return w.server
}

// Unwrap implements wrap.Unwrapper and returns the underlying server instance as an unknown type.
func (w *apiWrapper) Unwrap() any {
	return w.UnwrapServer()
}
