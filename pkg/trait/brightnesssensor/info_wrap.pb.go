// Code generated by protoc-gen-wrapper. DO NOT EDIT.

package brightnesssensor

import (
	traits "github.com/smart-core-os/sc-api/go/traits"
	wrap "github.com/smart-core-os/sc-golang/pkg/wrap"
	grpc "google.golang.org/grpc"
)

// WrapInfo	adapts a traits.BrightnessSensorInfoServer	and presents it as a traits.BrightnessSensorInfoClient
func WrapInfo(server traits.BrightnessSensorInfoServer) *InfoWrapper {
	conn := wrap.ServerToClient(traits.BrightnessSensorInfo_ServiceDesc, server)
	client := traits.NewBrightnessSensorInfoClient(conn)
	return &InfoWrapper{
		BrightnessSensorInfoClient: client,
		server:                     server,
		conn:                       conn,
		desc:                       traits.BrightnessSensorInfo_ServiceDesc,
	}
}

type InfoWrapper struct {
	traits.BrightnessSensorInfoClient

	server traits.BrightnessSensorInfoServer
	conn   grpc.ClientConnInterface
	desc   grpc.ServiceDesc
}

// UnwrapServer returns the underlying server instance.
func (w *InfoWrapper) UnwrapServer() traits.BrightnessSensorInfoServer {
	return w.server
}

// Unwrap implements wrap.Unwrapper and returns the underlying server instance as an unknown type.
func (w *InfoWrapper) Unwrap() any {
	return w.UnwrapServer()
}

func (w *InfoWrapper) UnwrapService() (grpc.ClientConnInterface, grpc.ServiceDesc) {
	return w.conn, w.desc
}
