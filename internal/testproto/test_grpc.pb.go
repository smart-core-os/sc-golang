// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.1
// source: internal/testproto/test.proto

package testproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TestApiClient is the client API for TestApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TestApiClient interface {
	Unary(ctx context.Context, in *UnaryRequest, opts ...grpc.CallOption) (*UnaryResponse, error)
	ServerStream(ctx context.Context, in *ServerStreamRequest, opts ...grpc.CallOption) (TestApi_ServerStreamClient, error)
	ClientStream(ctx context.Context, opts ...grpc.CallOption) (TestApi_ClientStreamClient, error)
	BidiStream(ctx context.Context, opts ...grpc.CallOption) (TestApi_BidiStreamClient, error)
}

type testApiClient struct {
	cc grpc.ClientConnInterface
}

func NewTestApiClient(cc grpc.ClientConnInterface) TestApiClient {
	return &testApiClient{cc}
}

func (c *testApiClient) Unary(ctx context.Context, in *UnaryRequest, opts ...grpc.CallOption) (*UnaryResponse, error) {
	out := new(UnaryResponse)
	err := c.cc.Invoke(ctx, "/sc.go.test.TestApi/Unary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testApiClient) ServerStream(ctx context.Context, in *ServerStreamRequest, opts ...grpc.CallOption) (TestApi_ServerStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &TestApi_ServiceDesc.Streams[0], "/sc.go.test.TestApi/ServerStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &testApiServerStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TestApi_ServerStreamClient interface {
	Recv() (*ServerStreamResponse, error)
	grpc.ClientStream
}

type testApiServerStreamClient struct {
	grpc.ClientStream
}

func (x *testApiServerStreamClient) Recv() (*ServerStreamResponse, error) {
	m := new(ServerStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *testApiClient) ClientStream(ctx context.Context, opts ...grpc.CallOption) (TestApi_ClientStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &TestApi_ServiceDesc.Streams[1], "/sc.go.test.TestApi/ClientStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &testApiClientStreamClient{stream}
	return x, nil
}

type TestApi_ClientStreamClient interface {
	Send(*ClientStreamRequest) error
	CloseAndRecv() (*ClientStreamResponse, error)
	grpc.ClientStream
}

type testApiClientStreamClient struct {
	grpc.ClientStream
}

func (x *testApiClientStreamClient) Send(m *ClientStreamRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *testApiClientStreamClient) CloseAndRecv() (*ClientStreamResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ClientStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *testApiClient) BidiStream(ctx context.Context, opts ...grpc.CallOption) (TestApi_BidiStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &TestApi_ServiceDesc.Streams[2], "/sc.go.test.TestApi/BidiStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &testApiBidiStreamClient{stream}
	return x, nil
}

type TestApi_BidiStreamClient interface {
	Send(*BidiStreamRequest) error
	Recv() (*BidiStreamResponse, error)
	grpc.ClientStream
}

type testApiBidiStreamClient struct {
	grpc.ClientStream
}

func (x *testApiBidiStreamClient) Send(m *BidiStreamRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *testApiBidiStreamClient) Recv() (*BidiStreamResponse, error) {
	m := new(BidiStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TestApiServer is the server API for TestApi service.
// All implementations must embed UnimplementedTestApiServer
// for forward compatibility
type TestApiServer interface {
	Unary(context.Context, *UnaryRequest) (*UnaryResponse, error)
	ServerStream(*ServerStreamRequest, TestApi_ServerStreamServer) error
	ClientStream(TestApi_ClientStreamServer) error
	BidiStream(TestApi_BidiStreamServer) error
	mustEmbedUnimplementedTestApiServer()
}

// UnimplementedTestApiServer must be embedded to have forward compatible implementations.
type UnimplementedTestApiServer struct {
}

func (UnimplementedTestApiServer) Unary(context.Context, *UnaryRequest) (*UnaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unary not implemented")
}
func (UnimplementedTestApiServer) ServerStream(*ServerStreamRequest, TestApi_ServerStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ServerStream not implemented")
}
func (UnimplementedTestApiServer) ClientStream(TestApi_ClientStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ClientStream not implemented")
}
func (UnimplementedTestApiServer) BidiStream(TestApi_BidiStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method BidiStream not implemented")
}
func (UnimplementedTestApiServer) mustEmbedUnimplementedTestApiServer() {}

// UnsafeTestApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TestApiServer will
// result in compilation errors.
type UnsafeTestApiServer interface {
	mustEmbedUnimplementedTestApiServer()
}

func RegisterTestApiServer(s grpc.ServiceRegistrar, srv TestApiServer) {
	s.RegisterService(&TestApi_ServiceDesc, srv)
}

func _TestApi_Unary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestApiServer).Unary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sc.go.test.TestApi/Unary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestApiServer).Unary(ctx, req.(*UnaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestApi_ServerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ServerStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TestApiServer).ServerStream(m, &testApiServerStreamServer{stream})
}

type TestApi_ServerStreamServer interface {
	Send(*ServerStreamResponse) error
	grpc.ServerStream
}

type testApiServerStreamServer struct {
	grpc.ServerStream
}

func (x *testApiServerStreamServer) Send(m *ServerStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TestApi_ClientStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TestApiServer).ClientStream(&testApiClientStreamServer{stream})
}

type TestApi_ClientStreamServer interface {
	SendAndClose(*ClientStreamResponse) error
	Recv() (*ClientStreamRequest, error)
	grpc.ServerStream
}

type testApiClientStreamServer struct {
	grpc.ServerStream
}

func (x *testApiClientStreamServer) SendAndClose(m *ClientStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *testApiClientStreamServer) Recv() (*ClientStreamRequest, error) {
	m := new(ClientStreamRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TestApi_BidiStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TestApiServer).BidiStream(&testApiBidiStreamServer{stream})
}

type TestApi_BidiStreamServer interface {
	Send(*BidiStreamResponse) error
	Recv() (*BidiStreamRequest, error)
	grpc.ServerStream
}

type testApiBidiStreamServer struct {
	grpc.ServerStream
}

func (x *testApiBidiStreamServer) Send(m *BidiStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *testApiBidiStreamServer) Recv() (*BidiStreamRequest, error) {
	m := new(BidiStreamRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TestApi_ServiceDesc is the grpc.ServiceDesc for TestApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TestApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sc.go.test.TestApi",
	HandlerType: (*TestApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Unary",
			Handler:    _TestApi_Unary_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ServerStream",
			Handler:       _TestApi_ServerStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ClientStream",
			Handler:       _TestApi_ClientStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "BidiStream",
			Handler:       _TestApi_BidiStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "internal/testproto/test.proto",
}
